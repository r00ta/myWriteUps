#!/usr/bin/env python2

import sys, socket, telnetlib
import base64
from struct import *
import binascii
import re
from sol import solve

def recvuntil(t):
    data = ''
    while not data.endswith(t):
        tmp = s.recv(1)
        if not tmp: break
        data += tmp

    return data

def interactive():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

def recv_menu():
    recvuntil('-----------------------------*\n')

def XOR(b):
    s.send('XOR\n')
    recvuntil('Please choose the operand in hex >>> ')
    s.send(hex(b).strip('L') + '\n')
    recvuntil('Ciphertext is  ')
    data = recvuntil('==')
    return data.strip('\n')

def ADD(b):
    s.send('ADD\n')
    recvuntil('Please choose the operand in hex >>> ')
    s.send(hex(b).strip('L') + '\n')
    recvuntil('Ciphertext is  ')
    data = recvuntil('==')
    return data.strip('\n')

def DEC(key):
    s.send('DEC\n')
    recvuntil('Enter the key base64 encoded >>> ')
    s.send(base64.b64encode(key) + '\n')
    data = recvuntil('------------------------------\n')
    return data

def print_cipher():
    print XOR(0)

def leak_chr_at(pos):
	l = []
	for x in range(256):
		l.append(binascii.hexlify(base64.b64decode(XOR( int( '0x' + hex(x)[2:] + ('0' * pos), 16 ) ) ) ) )
		recv_menu()

	g = open('log_xor.txt','w')
	for x in l:
   		g.write(x + '\n')
	g.close()

	l = []
	for x in range(256):
		l.append(binascii.hexlify(base64.b64decode(ADD( int( '0x' + hex(x)[2:] + ('0'*pos), 16 ) ) ) ) ) 
		recv_menu()

	g = open('log_add.txt','w')
	for x in l:
	    g.write(x + '\n')
	g.close()
	final = solve()
	print 'POS {}, final {}'.format(pos, final)
	print len(set(map(lambda x: hex(x)[-1], final))) == 1
	if final:
		return final[-1]
	else:
		return None

def p32(x): return pack('<I', x)
def u32(x): return unpack('<I', x)[0]
def p64(x): return pack('<Q', x)
def u64(x): return unpack('<Q', x)[0]

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], int(sys.argv[2])))
recv_menu()
print_cipher()
recv_menu()
final = []
for x in range(32):
	final.append(leak_chr_at(x))

print final[::-1]
final = final[1:]
print final

interactive()
s.close()
